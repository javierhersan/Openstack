heat_template_version: 2016-04-08

description: Tenant init for GBM Cloud

parameters:
  private_net1_name:
    type: string
    description: Name of Private Tenant Network
  private_subnet1_name:
    type: string
    description: Name of Private Subnet
  private_subnet1_cidr:
    type: string
    description: CIDR of Private Subnet
  private_subnet1_gateway:
    type: string
    description: Gateway of Private Subnet
  private_net1_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net1_pool_end:
    type: string
    description: End of private network IP address allocation pool
  private_net2_name:
    type: string
    description: Name of Private Tenant Network
  private_subnet2_name:
    type: string
    description: Name of Private Subnet
  private_subnet2_cidr:
    type: string
    description: CIDR of Private Subnet
  private_net2_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net2_pool_end:
    type: string
    description: End of private network IP address allocation pool
  dns:
    type: comma_delimited_list
    label: DNS nameservers
    description: Comma separated list of DNS nameservers
  public_net_name:
    type: string
    description: Name of Private Network
  router_name:
    type: string
    description: Name of Router
  VM1_name:
    type: string
    description: Name of Virtual Machine
  VM2_name:
    type: string
    description: Name of Virtual Machine
  VM3_name:
    type: string
    description: Name of Virtual Machine
  VM4_name:
    type: string
    description: Name of Virtual Machine
  VM5_name:
    type: string
    description: Name of Virtual Machine
  key_name:
    type: string
    description: Name of SSH Key
  image_name:
    type: string
    description: Name of Image to use for the VM instance (Should exist before hand)
  flavor_name:
    type: string
    description: Name of flavor to use for the VM instance (Should exist before hand)
  sec_group_name:
    type: string
    description: Name of Security Group

resources:
  private_net1:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net1_name }
      shared: false
  private_subnet1:
    type: OS::Neutron::Subnet
    depends_on: [private_net1]
    properties:
      name: { get_param: private_subnet1_name }
      network_id: { get_resource: private_net1 }
      cidr: { get_param: private_subnet1_cidr }
      gateway_ip: { get_param: private_subnet1_gateway }
      dns_nameservers: { get_param: dns }
      allocation_pools:
        - start: { get_param: private_net1_pool_start }
          end: { get_param: private_net1_pool_end }
  private_net2:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net2_name }
      shared: false
  private_subnet2:
    type: OS::Neutron::Subnet
    depends_on: [private_net2]
    properties:
      name: { get_param: private_subnet2_name }
      network_id: { get_resource: private_net2 }
      cidr: { get_param: private_subnet2_cidr }
      dns_nameservers: { get_param: dns }
      allocation_pools:
        - start: { get_param: private_net2_pool_start }
          end: { get_param: private_net2_pool_end }
  router1:
    type: OS::Neutron::Router
    depends_on: [private_net1, private_subnet1]
    properties:
      name: { get_param: router_name }
      external_gateway_info:
        network: { get_param: public_net_name }
  router1_interface1:
    type: OS::Neutron::RouterInterface
    depends_on: [router1, private_subnet1]
    properties:
      router_id: { get_resource: router1 }
      subnet_id: { get_resource: private_subnet1 }
  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security Group for VM
      name: { get_param: sec_group_name }
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
  server_ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: key_name }
      save_private_key: true
  floating_ip: 
    depends_on: [private_subnet1,port_vm4net1, router1, router1_interface1, server_admin]
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_name }
      port_id: { get_resource: port_vm4net1 }
  port_vm1net1:
    depends_on: [private_subnet1]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net1}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet1 }
  port_vm2net1:
    depends_on: [private_subnet1]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net1}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet1 }
  port_vm3net1:
    depends_on: [private_subnet1]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net1}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet1 }
  port_vm4net1:
    depends_on: [private_subnet1]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net1}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet1 }
  port_vm1net2:
    depends_on: [private_subnet2]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net2}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet2 }
  port_vm2net2:
    depends_on: [private_subnet2]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net2}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet2 }
  port_vm3net2:
    depends_on: [private_subnet2]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net2}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet2 }
  port_vm4net2:
    depends_on: [private_subnet2]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net2}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet2 }
  port_vm5net2:
    depends_on: [private_subnet2]
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net2}
      security_groups: [{ get_resource: server_security_group }]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet2 }
  server1:
    depends_on: [server_security_group,private_subnet1,private_subnet2,port_vm1net1,port_vm1net2]
    type: OS::Nova::Server
    properties:
      name: { get_param: VM1_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
      - port: { get_resource: port_vm1net1 }
      - port: { get_resource: port_vm1net2 }
      user_data: | 
        #cloud-config
        packages:
        - aptsh
        - apache2
        runcmd:
        - ifconfig ens4 up
        - dhclient ens4
        - echo "<h1>Server 1</h1>" | sudo tee /var/www/html/index.html
      user_data_format: RAW
  server2:
    depends_on: [server_security_group,private_subnet1,private_subnet2,port_vm2net1,port_vm2net2]
    type: OS::Nova::Server
    properties:
      name: { get_param: VM2_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
      - port: { get_resource: port_vm2net1 }
      - port: { get_resource: port_vm2net2 }
      user_data: | 
        #cloud-config
        packages:
        - aptsh
        - apache2
        runcmd:
        - ifconfig ens4 up
        - dhclient ens4
        - echo "<h1>Server 2</h1>" | sudo tee /var/www/html/index.html
      user_data_format: RAW
  server3:
    depends_on: [server_security_group,private_subnet1,private_subnet2,port_vm3net1,port_vm3net2]
    type: OS::Nova::Server
    properties:
      name: { get_param: VM3_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
      - port: { get_resource: port_vm3net1 }
      - port: { get_resource: port_vm3net2 }
      user_data: | 
        #cloud-config
        packages:
        - aptsh
        - apache2
        runcmd:
        - ifconfig ens4 up
        - dhclient ens4
        - echo "<h1>Server 3</h1>" | sudo tee /var/www/html/index.html
      user_data_format: RAW
  server_admin:
    depends_on: [server_security_group,server_ssh_key,private_subnet1,private_subnet2,port_vm4net1,port_vm4net2]
    type: OS::Nova::Server
    properties:
      name: { get_param: VM4_name }
      key_name: { get_resource: server_ssh_key }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
      - port: { get_resource: port_vm4net1 }
      - port: { get_resource: port_vm4net2 }
      user_data: | 
        #cloud-config
        hostname: adminserver
        fqdn: adminserver.example.com
        manage_etc_hosts: true
        packages:
        - aptsh
        runcmd:
        - ifconfig ens4 up
        - dhclient ens4
      user_data_format: RAW
  server_db:
    depends_on: [server_security_group,private_subnet2,port_vm5net2]
    type: OS::Nova::Server
    properties:
      name: { get_param: VM5_name }
      image: ServerDBSnapshot
      flavor: { get_param: flavor_name }
      networks:
      - port: { get_resource: port_vm5net2 }
      user_data: | 
        #cloud-config
        hostname: dbserver
        fqdn: dbserver.example.com
        manage_etc_hosts: true
        packages:
        - aptsh
        runcmd:
        - echo db > /root/db.txt
      user_data_format: RAW

outputs:
  tenant_ssh_key:
    description: Private Key for Tenant Machine
    value: { get_attr: [server_ssh_key, private_key] }

